"""create tables

Revision ID: 14e7193e14e3
Revises:
Create Date: 2025-04-27 18:37:57.788901

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '14e7193e14e3'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'user',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('image', sa.String(), nullable=False),
        sa.Column('email', sa.String(), nullable=False),
        sa.Column('password', sa.String(), nullable=False),
        sa.Column('street', sa.String(), nullable=True),
        sa.Column('city', sa.String(), nullable=True),
        sa.Column('state', sa.String(), nullable=True),
        sa.Column('postalcode', sa.String(), nullable=True),
        sa.Column('country', sa.String(), nullable=True),
        sa.Column(
            'created_at',
            sa.TIMESTAMP(),
            server_default=sa.text('now()'),
            nullable=False,
        ),
        sa.Column(
            'updated_at',
            sa.TIMESTAMP(),
            server_default=sa.text('now()'),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('email'),
    )
    op.create_table(
        'user_item',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('description', sa.String(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column(
            'images_path', postgresql.ARRAY(sa.String()), nullable=False
        ),
        sa.Column('quantity', sa.Integer(), nullable=False),
        sa.Column(
            'status',
            postgresql.ENUM(
                'offer_agreed', 'in_offer', 'not_listed', name='item_status'
            ),
            nullable=False,
        ),
        sa.Column(
            'trade_type',
            postgresql.ENUM('post', 'delivery', 'pickup', name='trade_type'),
            nullable=False,
        ),
        sa.Column(
            'created_at',
            sa.TIMESTAMP(),
            server_default=sa.text('now()'),
            nullable=False,
        ),
        sa.Column(
            'updated_at',
            sa.TIMESTAMP(),
            server_default=sa.text('now()'),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ['user_id'],
            ['user.id'],
        ),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_table(
        'trade',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_item_id_from', sa.Integer(), nullable=False),
        sa.Column('user_item_id_to', sa.Integer(), nullable=False),
        sa.Column('trade_date', sa.TIMESTAMP(), nullable=False),
        sa.Column(
            'trade_status',
            postgresql.ENUM(
                'opened',
                'closed',
                'pending',
                'accepted',
                'completed',
                'canceled',
                name='trade_status',
            ),
            nullable=False,
        ),
        sa.Column(
            'created_at',
            sa.TIMESTAMP(),
            server_default=sa.text('now()'),
            nullable=False,
        ),
        sa.Column(
            'updated_at',
            sa.TIMESTAMP(),
            server_default=sa.text('now()'),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ['user_item_id_from'],
            ['user_item.id'],
        ),
        sa.ForeignKeyConstraint(
            ['user_item_id_to'],
            ['user_item.id'],
        ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('user_item_id_from'),
        sa.UniqueConstraint('user_item_id_to'),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('trade')
    op.drop_table('user_item')
    op.drop_table('user')
    # ### end Alembic commands ###
